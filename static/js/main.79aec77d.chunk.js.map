{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","handleChange2","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOAAAA,EAAOC,QAAU,IAA0B,kC,4ICG9BC,G,MAAO,SAACC,GAGjB,OAEK,yBAAKC,UAAU,kBAEZ,yBAAKA,UAAU,WAAWC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eAC3C,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCNjBC,G,MAAW,SAACR,GACvB,OACO,yBAAKC,UAAU,aACXD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,UCNlCQ,G,MAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACnC,OAEK,2BACEb,UAAU,SACVc,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCoDPG,G,wBAtDX,aAAc,IAAD,8BACT,+CAmBJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAnBrC,EAAKC,MAAM,CACTd,SAAS,GACTW,YAAY,IAGd,EAAKI,cAAgB,EAAKA,cAAcC,KAAnB,gBAPZ,E,iFAUO,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACV,SAASqB,S,oCAY7BZ,GACVa,KAAKZ,SAAS,CAACC,YAAaF,EAAEG,OAAOC,U,+BAGhC,IAAD,EAE6BS,KAAKR,MAA9Bd,EAFJ,EAEIA,SAAUW,EAFd,EAEcA,YACZY,EAAmBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC1CA,EAAQE,KAAK4B,cAAcC,SAASf,EAAYc,kBAGtD,OAIK,yBAAKjC,UAAU,OACX,gDACA,kBAAC,EAAD,CACGY,YAAY,kBACZC,aAAciB,KAAKP,gBAEtB,kBAAC,EAAD,CAAUf,SAAUuB,S,GA/CnBI,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.79aec77d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './card.styles.css'\n\nexport const Card = (props) =>{\n     \n    \n    return (\n  \n         <div className=\"card-container\">\n\n            <img className=\"card-img\" alt=\"monster\" src={`https://robohash.org/${props.monster.id}/set=set2`} />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n         </div>\n    \t);\n\n};","import React from 'react';\nimport {Card} from '../card/card.component'\nimport './card-list.styles.css'\n\n// return a component as function component (stateless)\n\nexport const CardList = (props) =>{\n\t return (\n         <div className='card-list'>\n            {props.monsters.map(monster=>\n               <Card key={monster.id} monster={monster} />\n            )}\n         </div>\n\t \t);\n}","import React from 'react'\nimport './search-box.style.css'\n\n\nexport const SearchBox = ({placeholder, handleChange})=>{\n     return (\n\n          <input \n            className='search'\n            type='search'\n            placeholder= {placeholder}\n            onChange={handleChange}\n          />\n     \t);\n};","import React from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component{\n    constructor(){\n        super();\n        this.state={\n          monsters:[],\n          searchField:''\n        };\n\n        this.handleChange2 = this.handleChange2.bind(this);\n    }\n\n    componentDidMount(){\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(response => response.json())\n        .then(users => this.setState({monsters:users}))\n    }\n    \n    \n\n    // this is a function expression that will be declared the first time this object created \n    // so (this) keyward represented the class, so don't need a bind in the constructor\n    handleChange = (e)=>{\n        this.setState({searchField: e.target.value});\n    }\n\n    // test handleChange as a regular function with bind in constructor\n    handleChange2(e){\n        this.setState({searchField: e.target.value});\n    }\n\n    render(){\n\n        const { monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter(monster=>\n              monster.name.toLowerCase().includes(searchField.toLowerCase())\n          );\n\n        return (\n             \n             \n             \n             <div className='App'>\n                 <h1>Monsters Rolodex</h1>\n                 <SearchBox \n                    placeholder='search monsters'\n                    handleChange={this.handleChange2}\n                 />\n                 <CardList monsters={filteredMonsters} />\n             </div>\n\n          );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}